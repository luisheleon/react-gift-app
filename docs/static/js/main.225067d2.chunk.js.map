{"version":3,"sources":["components/AddCategory.js","components/CardImage.js","helpers/getGifts.js","hooks/useGetGifts.js","components/GifGrid.js","App.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","errorText","setErrorText","value","setValue","Fragment","id","onSubmit","e","preventDefault","length","catego","includes","console","log","className","TextField","required","error","label","onChange","target","size","Button","type","variant","disabled","propType","handleNewCategory","PropTypes","func","isRequired","MediaCard","title","url","Card","sx","maxWidth","CardMedia","component","height","image","alt","CardContent","Typography","gutterBottom","getGif","category","a","fetch","response","json","data","gifts","map","images","downsized_medium","useGetGifts","loading","state","setState","useEffect","then","GifGrid","Grid","container","spacing","img","item","md","key","App","props","categories","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.225067d2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, TextField } from \"@mui/material\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [errorText, setErrorText] = useState(false);\n  const [value, setValue] = useState(\"\");\n\n  const handleAddCategorie = (e) => {\n    e.preventDefault();\n    if (value.length) {\n      setCategories((catego) => {\n        if (!catego.includes(value)) {\n          return [value, ...catego];\n        } else {\n          setErrorText(true);\n          console.log(\"Elemento ya fue agregado\");\n          return catego;\n        }\n      });\n      setValue(\"\");\n    }\n  };\n  return (\n    <React.Fragment>\n      <h2 id=\"subtitle\">Add category</h2>\n      <form onSubmit={handleAddCategorie}>\n        <div className=\"newCategoryForm\">\n          <TextField\n            required\n            error={errorText}\n            id=\"outlined-required\"\n            label=\"Add Category\"\n            value={value}\n            onChange={(e) => {\n              e.target.value.length && setErrorText(false);\n              setValue(e.target.value);\n            }}\n            size=\"small\"\n          />\n          {errorText && <label className=\"labelError\">El elemento ya fue agregado</label>}\n        </div>\n\n        <Button id=\"btnAddCategory\" type=\"submit\" variant=\"outlined\" size=\"medium\" disabled={!value.length}>\n          Add\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nAddCategory.propType = {\n  handleNewCategory: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import * as React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Typography from \"@mui/material/Typography\";\nimport \"animate.css\";\n\nexport default function MediaCard({ id, title, url }) {\n  return (\n    <Card sx={{ maxWidth: 345 }} className=\"animate__animated animate__fadeIn\">\n      <CardMedia component=\"img\" height=\"140\" image={url} alt={id + title} />\n      <CardContent className=\"cardTitle\">\n        <Typography gutterBottom variant=\"caption\" component=\"div\">\n          {title}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","export const getGif = async (category) => {\n  const response = await fetch(\"https://api.giphy.com/v1/gifs/search?q=\" + category + \"&api_key=LGuwnSrWynYuTcwERkZbHr2NWiCYofNo&limit=10\");\n  const { data } = await response.json();\n  const gifts = data.map((image) => {\n    return {\n      id: image.id,\n      title: image.title,\n      url: image.images?.downsized_medium.url,\n    };\n  });\n  return gifts;\n};\n","import { useState, useEffect } from \"react\";\nimport { getGif } from \"../helpers/getGifts\";\n\nconst useGetGifts = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGif(category).then((data) =>\n      setState({\n        data: data,\n        loading: false,\n      })\n    );\n  }, [category, state]);\n\n  return state;\n};\n\nexport default useGetGifts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CardImage from \"./CardImage\";\nimport { Grid } from \"@mui/material\";\nimport useGetGifts from \"../hooks/useGetGifts\";\n\nfunction GifGrid({ category }) {\n  const { data: images, loading } = useGetGifts(category);\n\n  return (\n    <React.Fragment>\n      {loading && \"Cargando... \"}\n      <h3>Categories {category} </h3>\n      <Grid container spacing={2}>\n        {images.map((img) => (\n          <Grid item md={2} key={`grid-${img.id}`}>\n            <CardImage {...img} key={img.id} category={category} />\n          </Grid>\n        ))}\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.string,\n};\n\nexport default GifGrid;\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport \"./App.css\";\nimport GifGrid from \"./components/GifGrid\";\n\nfunction App(props) {\n  const [categories, setCategories] = useState([\"avatar\", \"goku\"]);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <h1 id=\"title\">GifExpertApp</h1>\n\n      <hr />\n\n      <AddCategory setCategories={setCategories} />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}